<%- include("../../views/partials/admin/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <style>
        .content-wrapper {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .sticky-header {
            background: white;
            padding: 15px 0;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 20px;
        }
        
        .content-title {
            color: #2c3e50;
            font-weight: 600;
        }
        
        .btn-update {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-update:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 12px 20px;
            margin-right: 5px;
            border-radius: 8px 8px 0 0;
        }
        
        .nav-tabs .nav-link.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
        }
        
        .card {
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-radius: 12px;
            margin-bottom: 20px;
        }
        
        .card-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 1px solid #dee2e6;
            padding: 15px 20px;
            border-radius: 12px 12px 0 0;
        }
        
        .card-header h4 {
            margin: 0;
            color: #2c3e50;
            font-weight: 600;
        }
        
        .form-control, .form-select {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 12px 15px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        /* Fixed error styling */
        .form-control.is-invalid, .form-select.is-invalid {
            border-color: #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        }
        
        .size-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin-top: 10px;
        }
        
        .size-grid > div {
            text-align: center;
        }
        
        .error-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 5px;
            display: none;
        }
        
        .error-message.show {
            display: block;
        }
        
        .media-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }
        
        .image-container {
            position: relative;
            border: 2px dashed #dee2e6;
            border-radius: 12px;
            padding: 15px;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .image-container:hover {
            border-color: #667eea;
            background: #f0f2ff;
        }
        
        .image-preview {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        
        .image-actions {
            display: flex;
            gap: 5px;
            justify-content: center;
        }
        
        .btn-replace {
            background: #28a745;
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 0.875em;
            transition: all 0.3s ease;
        }
        
        .btn-replace:hover {
            background: #218838;
            transform: translateY(-1px);
        }
        
        .cropper-container {
            max-height: 400px;
            margin: 20px 0;
        }
        
        .checklist-item {
            padding: 10px 15px;
            border: none;
            background: transparent;
        }
        
        .badge.completed {
            background: #28a745 !important;
        }
        
        .badge.pending {
            background: #6c757d !important;
        }
        
        .hidden-input {
            display: none;
        }
        .spinner-border-sm {
    width: 1rem;
    height: 1rem;
}

.crop-modal .modal-dialog {
            max-width: 600px;
        }
        .crop-container {
            max-height: 400px;
            overflow: hidden;
        }
        .crop-container img {
            max-width: 100%;
        }
        .crop-preview {
            width: 100px;
            height: 100px;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px auto;
        }
    </style>
</head>
<body>
<div class="container-fluid p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Edit Product</h2>
            <button class="btn btn-primary" type="submit" form="product-form">Update Product</button>
        </div>
        
        <form id="product-form" method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
            <div class="row">
                <div class="col-lg-9">
                    <!-- Basic Information -->
                    <div class="card mb-4">
                        <div class="card-header"><h4>Basic Information</h4></div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Product Name *</label>
                                    <input type="text" class="form-control" name="productName" value="<%= product.productName %>" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Category *</label>
                                    <select class="form-select" name="category" required>
                                        <option value="">Select Category</option>
                                        <% for(let i=0; i<cat.length; i++) { %>
                                        <option value="<%= cat[i]._id %>" <%= product.category.toString() === cat[i]._id.toString() ? 'selected' : '' %>><%= cat[i].name %></option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <option value="">Select Brand</option>
                                        <% for (let i = 0; i < brand.length; i++) { %>
                                        <option value="<%= brand[i].brandName %>" <%= product.brand === brand[i].brandName ? 'selected' : '' %>><%= brand[i].brandName %></option>
                                        <% } %>
                                    </select>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">Regular Price *</label>
                                    <input type="number" class="form-control" name="regularPrice" value="<%= product.regularPrice %>" required>
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label class="form-label">Sale Price *</label>
                                    <input type="number" class="form-control" name="salePrice" value="<%= product.salePrice %>" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Variants -->
                    <div class="card mb-4">
                        <div class="card-header"><h4>Variants</h4></div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Color *</label>
                                    <input type="text" class="form-control" name="color" value="<%= product.color %>" required>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Material</label>
                                    <input type="text" class="form-control" name="material" value="<%= product.material || '' %>" required>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Design</label>
                                    <input type="text" class="form-control" name="design" value="<%= product.design || '' %>" required>
                                </div>
                                <div class="col-md-3 mb-3">
                                    <label class="form-label">Occasion</label>
                                    <input type="text" class="form-control" name="occasion" value="<%= product.occasion || '' %>" required>
                                </div>
                            </div>
                            
                            <label class="form-label">Sizes & Quantities *</label>
                            <div class="row">
                                <% const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL']; %>
                                <% sizes.forEach(size => { %>
                                <div class="col-md-2 mb-3">
                                    <label class="form-label"><%= size %></label>
                                    <input type="number" class="form-control" name="quantity_<%= size.toLowerCase() %>" 
                                           value="<%= product.variants?.get(size) || 0 %>" min="0">
                                </div>
                                <% }); %>
                            </div>
                        </div>
                    </div>

                    <!-- Descriptions -->
                    <div class="card mb-4">
                        <div class="card-header"><h4>Descriptions</h4></div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Short Description *</label>
                                <textarea class="form-control" rows="3" name="description" required><%= product.description %></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Full Description *</label>
                                <textarea class="form-control" rows="5" name="longDescription" required><%= product.longDescription %></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Specifications *</label>
                                <textarea class="form-control" rows="5" name="specifications" required><%= product.specifications %></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Images -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Product Images (4-10 required)</h4>
                            <small class="text-muted">Current: <span id="imageCount"><%= product.productImages?.length || 0 %></span> images</small>
                        </div>
                        <div class="card-body">
                            <!-- Existing Images -->
                            <div id="existingImages" class="row mb-4">
                                <% if (product.productImages && product.productImages.length > 0) { %>
                                    <% product.productImages.forEach((image, index) => { %>
                                    <div class="col-md-3 mb-3" id="imageContainer<%= index %>">
                                        <div class="card">
                                            <img src="<%= image %>" class="card-img-top" style="height: 200px; object-fit: cover;">
                                            <div class="card-body p-2 text-center">
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteImage(<%= index %>)">
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <% }); %>
                                <% } %>
                            </div>

                            <!-- Add New Images -->
                            <div class="mb-3">
                                <label class="form-label">Add New Images</label>
                                <input type="file" class="form-control" id="imageInput" accept="image/*" 
                                       onchange="handleImageSelection(this)">
                                <small class="text-muted">Select one image at a time (JPEG, PNG, GIF, WebP) - Images will be cropped to square format</small>
                            </div>

                            <!-- Preview New Images -->
                            <div id="newImagesPreview" class="row"></div>

                            <!-- Hidden inputs for deleted images and cropped images -->
                            <div id="deletedImagesInputs"></div>
                            <div id="croppedImagesInputs"></div>
                        </div>
                    </div>
                </div>
                
                <!-- Sidebar -->
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-header"><h4>Status</h4></div>
                        <div class="card-body">
                            <div class="mb-2">
                                <span class="badge bg-info" id="statusBadge">Total Images: <span id="totalImages"><%= product.productImages?.length || 0 %></span></span>
                            </div>
                            <div class="mb-2">
                                <span class="badge bg-success">Status: <%= product.status %></span>
                            </div>
                            <small class="text-muted">Product requires 4-10 images to be valid</small>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Simplified Cropping Modal -->
    <div class="modal fade crop-modal" id="cropModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Crop Image (Square)</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="crop-container">
                        <img id="cropImage" src="" alt="Crop Image">
                    </div>
                    <div class="text-center mt-3">
                        <h6>Preview:</h6>
                        <div class="crop-preview" id="cropPreview"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="applyCrop()">Crop & Add</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script>
        // Fixed Edit Product JavaScript - Replace the existing script section

let deletedImages = [];
let croppedImages = [];
let cropper = null;
let currentImageFile = null;

function deleteImage(index) {
    if (confirm('Are you sure you want to delete this image?')) {
        deletedImages.push(index);
        document.getElementById(`imageContainer${index}`).style.display = 'none';
        updateDeletedImagesInputs();
        updateImageCount();
    }
}

function updateDeletedImagesInputs() {
    const container = document.getElementById('deletedImagesInputs');
    container.innerHTML = '';
    
    deletedImages.forEach(index => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'deletedImages';
        input.value = index;
        container.appendChild(input);
    });
}

function handleImageSelection(input) {
    if (input.files && input.files[0]) {
        currentImageFile = input.files[0];
        
        // Validate file type and size
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
        const maxSize = 5 * 1024 * 1024; // 5MB
        
        if (!validTypes.includes(currentImageFile.type)) {
            alert('Invalid file type. Only JPG, JPEG, PNG, WebP, GIF allowed.');
            input.value = '';
            return;
        }
        
        if (currentImageFile.size > maxSize) {
            alert('File too large. Maximum 5MB allowed.');
            input.value = '';
            return;
        }
        
        openCropModal();
    }
}

function openCropModal() {
    const reader = new FileReader();
    reader.onload = function(e) {
        const cropImage = document.getElementById('cropImage');
        cropImage.src = e.target.result;
        
        const modal = new bootstrap.Modal(document.getElementById('cropModal'));
        modal.show();
        
        document.getElementById('cropModal').addEventListener('shown.bs.modal', function() {
            if (cropper) {
                cropper.destroy();
            }
            
            cropper = new Cropper(cropImage, {
                aspectRatio: 1, // Square only
                viewMode: 2,
                autoCropArea: 0.8,
                responsive: true,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
                preview: '#cropPreview'
            });
        }, { once: true });
    };
    reader.readAsDataURL(currentImageFile);
}

// Fixed applyCrop function - this was the main issue
function applyCrop() {
    if (cropper && currentImageFile) {
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });
        
        // Convert canvas to base64 data URL
        const croppedDataUrl = canvas.toDataURL(currentImageFile.type, 0.9);
        
        // Add to cropped images array
        croppedImages.push(croppedDataUrl);
        
        // Add preview to the UI
        addCroppedImageToPreview(croppedDataUrl, croppedImages.length - 1);
        
        // Update hidden inputs
        updateCroppedImagesInputs();
        
        // Update image count
        updateImageCount();
        
        // Clear input and close modal
        document.getElementById('imageInput').value = '';
        const modal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
        modal.hide();
        
        // Reset current file
        currentImageFile = null;
        
        console.log('Cropped image added. Total cropped images:', croppedImages.length);
    }
}

function addCroppedImageToPreview(dataUrl, index) {
    const preview = document.getElementById('newImagesPreview');
    const col = document.createElement('div');
    col.className = 'col-md-3 mb-3';
    col.id = `croppedImage${index}`;
    col.innerHTML = `
        <div class="card">
            <img src="${dataUrl}" class="card-img-top" style="height: 150px; object-fit: cover;">
            <div class="card-body p-2 text-center">
                <small class="text-success d-block mb-2">New Image</small>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeCroppedImage(${index})">
                    Remove
                </button>
            </div>
        </div>
    `;
    preview.appendChild(col);
}

function removeCroppedImage(index) {
    if (confirm('Remove this image?')) {
        document.getElementById(`croppedImage${index}`).remove();
        croppedImages.splice(index, 1);
        updateCroppedImagesInputs();
        updateImageCount();
        renderCroppedImagesPreview();
    }
}

function renderCroppedImagesPreview() {
    const preview = document.getElementById('newImagesPreview');
    preview.innerHTML = '';
    
    croppedImages.forEach((dataUrl, index) => {
        addCroppedImageToPreview(dataUrl, index);
    });
}

// Fixed updateCroppedImagesInputs function
function updateCroppedImagesInputs() {
    const container = document.getElementById('croppedImagesInputs');
    container.innerHTML = '';
    
    croppedImages.forEach((dataUrl, index) => {
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'croppedImages';
        input.value = dataUrl;
        container.appendChild(input);
    });
    
    console.log('Updated cropped images inputs. Count:', croppedImages.length);
}

function updateImageCount() {
    const existingCount = document.querySelectorAll('#existingImages [id^="imageContainer"]:not([style*="display: none"])').length;
    const newCount = croppedImages.length;
    const total = existingCount + newCount;
    
    document.getElementById('imageCount').textContent = existingCount;
    document.getElementById('totalImages').textContent = total;
    
    const statusBadge = document.getElementById('statusBadge');
    if (total < 4) {
        statusBadge.className = 'badge bg-warning';
        statusBadge.innerHTML = `Total Images: ${total} (Need ${4 - total} more)`;
    } else if (total > 10) {
        statusBadge.className = 'badge bg-danger';
        statusBadge.innerHTML = `Total Images: ${total} (${total - 10} too many)`;
    } else {
        statusBadge.className = 'badge bg-success';
        statusBadge.innerHTML = `Total Images: ${total} (Valid)`;
    }
}

// Enhanced form validation with debug logging
document.getElementById('product-form').addEventListener('submit', function(e) {
    console.log('Form submission started');
    console.log('Deleted images:', deletedImages);
    console.log('Cropped images count:', croppedImages.length);
    
    const existingCount = document.querySelectorAll('#existingImages [id^="imageContainer"]:not([style*="display: none"])').length;
    const newCount = croppedImages.length;
    const total = existingCount + newCount;
    
    console.log('Image count - Existing:', existingCount, 'New:', newCount, 'Total:', total);
    
    if (total < 4 || total > 10) {
        e.preventDefault();
        alert(`Product must have between 4-10 images. Current: ${total} images.`);
        return false;
    }

    const quantities = ['quantity_xs', 'quantity_s', 'quantity_m', 'quantity_l', 'quantity_xl', 'quantity_xxl'];
    const hasQuantity = quantities.some(qty => {
        const field = document.querySelector(`[name="${qty}"]`);
        return field && parseInt(field.value) > 0;
    });

    if (!hasQuantity) {
        e.preventDefault();
        alert('At least one size quantity must be specified.');
        return false;
    }

    const regularPrice = parseFloat(document.querySelector('[name="regularPrice"]').value);
    const salePrice = parseFloat(document.querySelector('[name="salePrice"]').value);
    
    if (salePrice >= regularPrice) {
        e.preventDefault();
        alert('Sale price must be less than regular price.');
        return false;
    }

    if (salePrice <= 0) {
        e.preventDefault();
        alert('Invalid Price');
        return false;
    }
    
    console.log('Form validation passed, submitting...');
});

// Clean up cropper when modal is hidden
document.getElementById('cropModal').addEventListener('hidden.bs.modal', function() {
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    currentImageFile = null;
});

// Initialize
updateImageCount();
    </script>
</body>
</html>