<%- include("../../views/partials/admin/header") %>
<style>
  .error-message {
    color: #721c24;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 15px;
  }

  .success-message {
    color: #155724;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 15px;
  }

  .warning-message {
    color: #856404;
    background-color: #fff3cd;
    border: 1px solid #ffeaa7;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 15px;
  }

  /* Loading state styles */
  .btn-loading {
    position: relative;
    pointer-events: none;
    opacity: 0.7;
  }

  .btn-loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Custom Toast notification styles - Override Bootstrap */
  #customToastContainer {
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    z-index: 99999 !important;
    pointer-events: none !important;
    width: auto !important;
    max-width: none !important;
  }

  #customToastContainer .custom-toast {
    background: white !important;
    border-radius: 8px !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2) !important;
    margin-bottom: 15px !important;
    padding: 16px 20px !important;
    min-width: 320px !important;
    max-width: 400px !important;
    border-left: 4px solid !important;
    animation: customSlideIn 0.4s ease-out !important;
    pointer-events: auto !important;
    position: relative !important;
    opacity: 1 !important;
    transform: translateX(0) !important;
    width: auto !important;
    font-size: 14px !important;
    background-color: white !important;
    background-clip: unset !important;
    border: none !important;
    border-radius: 8px !important;
  }

  #customToastContainer .custom-toast.success {
    border-left-color: #28a745 !important;
    background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%) !important;
  }

  #customToastContainer .custom-toast.error {
    border-left-color: #dc3545 !important;
    background: linear-gradient(135deg, #fff8f8 0%, #ffffff 100%) !important;
  }

  #customToastContainer .custom-toast.warning {
    border-left-color: #ffc107 !important;
    background: linear-gradient(135deg, #fffef8 0%, #ffffff 100%) !important;
  }

  @keyframes customSlideIn {
    from {
      transform: translateX(100%) !important;
      opacity: 0 !important;
    }
    to {
      transform: translateX(0) !important;
      opacity: 1 !important;
    }
  }

  @keyframes customSlideOut {
    from {
      transform: translateX(0) !important;
      opacity: 1 !important;
    }
    to {
      transform: translateX(100%) !important;
      opacity: 0 !important;
    }
  }

  #customToastContainer .custom-toast.fade-out {
    animation: customSlideOut 0.3s ease-in forwards !important;
  }

  #customToastContainer .custom-toast-header {
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
    margin-bottom: 8px !important;
    padding: 0 !important;
    background: none !important;
    border: none !important;
  }

  #customToastContainer .custom-toast-title {
    font-weight: 600 !important;
    font-size: 15px !important;
    color: #333 !important;
  }

  #customToastContainer .custom-toast-close {
    background: none !important;
    border: none !important;
    font-size: 20px !important;
    cursor: pointer !important;
    color: #999 !important;
    padding: 0 !important;
    width: 24px !important;
    height: 24px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    border-radius: 50% !important;
    transition: all 0.2s ease !important;
    margin: 0 !important;
  }

  #customToastContainer .custom-toast-close:hover {
    background-color: #f0f0f0 !important;
    color: #666 !important;
  }

  #customToastContainer .custom-toast-message {
    font-size: 14px !important;
    color: #555 !important;
    line-height: 1.4 !important;
    padding: 0 !important;
    word-wrap: break-word !important;
  }

  /* Ensure toasts are always visible */
  #customToastContainer * {
    box-sizing: border-box !important;
  }
</style>

<!-- Custom Toast Container -->
<div id="customToastContainer"></div>

<div class="content-header row">
  <div class="d-flex justify-content-between align-items-center">
    <div>
      <h2 class="content-title card-title">Customers</h2>
      <small class="text-muted">Sorted by latest joined</small>
    </div>
  </div>
</div>

<header class="card-header text-center mb-3">
  <form action="/admin/users" method="get" class="d-inline">
    <div class="input-group input-group-sm border border-1 border-grey rounded-pill mx-auto" style="max-width: 100%; width: 100%; max-width: 500px;">
      <input type="text" class="form-control border-0 rounded-pill" placeholder="Search customers..." name="search">
      <button class="btn border-0" type="submit">Search</button>
    </div>
  </form>
</header>

<!-- Responsive Table Container -->
<div class="container-fluid px-3">
  <div >
    <table class="table table-striped table-bordered text-center">
      <thead class="table-dark">
        <tr>
          <th scope="col"><b>Name</b></th>
          <th scope="col"><b>Email</b></th>
          <th scope="col"><b>Phone No</b></th>
          <th scope="col"><b>Join Date</b></th>
          <th scope="col"><b>Action</b></th>
        </tr>
      </thead>
      <tbody>
        <% for(let i=0; i<data.length; i++) { %>
        <tr data-user-id="<%= data[i]._id %>">
          <td><%= data[i].name %></td>
          <td><%= data[i].email %></td>
          <td><%= data[i].phone %></td>
          <td>
            <% if (data[i].createdOn) { %>
              <%= new Date(data[i].createdOn).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              }) %>
            <% } else { %>
              N/A
            <% } %>
          </td>
          <td>
            <% if (data[i].isBlocked === false) { %>
              <button
                class="btn btn-danger btn-sm text-white block-user-btn"
                data-user-id="<%= data[i]._id %>"
                data-user-name="<%= data[i].name %>"
                data-user-email="<%= data[i].email %>"
              >
                Block
              </button>
            <% } else { %>
              <button
                class="btn btn-success btn-sm text-white unblock-user-btn"
                data-user-id="<%= data[i]._id %>"
                data-user-name="<%= data[i].name %>"
                data-user-email="<%= data[i].email %>"
              >
                Unblock
              </button>
            <% } %>
          </td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
</div>

<!-- Pagination -->
<div class="container mt-3">
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center mb-3">
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
          <a class="page-link" href="/admin/users?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>
    </ul>
  </nav>
</div>

<script>
  // Initialize AJAX event handlers when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeAjaxHandlers();
  });

  // Custom Toast notification function
  function showToast(message, type = 'success') {
    console.log(`üçû Showing custom toast: ${type} - ${message}`);
    
    let toastContainer = document.getElementById('customToastContainer');
    if (!toastContainer) {
      console.log('üì¶ Creating custom toast container');
      toastContainer = document.createElement('div');
      toastContainer.id = 'customToastContainer';
      document.body.appendChild(toastContainer);
    }
    
    const toast = document.createElement('div');
    toast.className = `custom-toast ${type}`;
    
    const title = type === 'success' ? 'Success' : type === 'error' ? 'Error' : 'Warning';
    const icon = type === 'success' ? '‚úì' : type === 'error' ? '‚úï' : '‚ö†';
    
    toast.innerHTML = `
      <div class="custom-toast-header">
        <span class="custom-toast-title">${icon} ${title}</span>
        <button class="custom-toast-close" onclick="removeCustomToast(this.parentElement.parentElement)">&times;</button>
      </div>
      <div class="custom-toast-message">${message}</div>
    `;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    console.log(`‚úÖ Custom toast added to DOM. Total toasts: ${toastContainer.children.length}`);
    
    // Force immediate visibility
    setTimeout(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Auto remove after 1 second (was 10 seconds)
    const autoRemoveTimer = setTimeout(() => {
      removeCustomToast(toast);
    }, 1000);
    
    // Store timer reference for manual removal
    toast.autoRemoveTimer = autoRemoveTimer;
    
    // Add hover pause functionality
    toast.addEventListener('mouseenter', () => {
      console.log('üñ±Ô∏è Custom toast hovered - pausing auto-remove');
      clearTimeout(toast.autoRemoveTimer);
    });
    
    toast.addEventListener('mouseleave', () => {
      console.log('üñ±Ô∏è Custom toast unhovered - resuming auto-remove');
      toast.autoRemoveTimer = setTimeout(() => {
        removeCustomToast(toast);
      }, 5000); // Give 5 more seconds after hover
    });
  }
  
  // Function to remove custom toast with animation
  function removeCustomToast(toast) {
    if (!toast || !toast.parentElement) {
      console.log('‚ùå Custom toast already removed or invalid');
      return;
    }
    
    console.log('üóëÔ∏è Removing custom toast');
    
    // Clear any pending timers
    if (toast.autoRemoveTimer) {
      clearTimeout(toast.autoRemoveTimer);
    }
    
    // Add fade-out animation
    toast.classList.add('fade-out');
    
    // Remove from DOM after animation
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
        console.log('‚úÖ Custom toast removed from DOM');
      }
    }, 300);
  }

  // Initialize AJAX event handlers
  function initializeAjaxHandlers() {
    // Block user buttons
    document.querySelectorAll('.block-user-btn').forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-user-id');
        const userName = this.getAttribute('data-user-name');
        const userEmail = this.getAttribute('data-user-email');
        
        confirmBlockUser(userId, userName, userEmail);
      });
    });

    // Unblock user buttons
    document.querySelectorAll('.unblock-user-btn').forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-user-id');
        const userName = this.getAttribute('data-user-name');
        const userEmail = this.getAttribute('data-user-email');
        
        confirmUnblockUser(userId, userName, userEmail);
      });
    });
  }

  // Block user function with AJAX
  async function confirmBlockUser(userId, userName, userEmail) {
    const message = `Are you sure you want to BLOCK this user?\n\n` +
                    `Name: ${userName}\n` +
                    `Email: ${userEmail}\n\n` +
                    `This will prevent the user from accessing their account.`;

    if (confirm(message)) {
      const button = document.querySelector(`[data-user-id="${userId}"].block-user-btn`);
      if (!button) return;

      // Add loading state
      button.classList.add('btn-loading');
      button.disabled = true;

      try {
        const response = await fetch('/admin/blockCustomer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId: userId })
        });

        const result = await response.json();

        if (result.success) {
          showToast(result.message, 'success');
          // Update the button to unblock
          updateUserButton(userId, false);
        } else {
          showToast(result.message, 'error');
        }
      } catch (error) {
        console.error('Error blocking user:', error);
        showToast('An error occurred while blocking the user. Please try again.', 'error');
      } finally {
        // Remove loading state
        button.classList.remove('btn-loading');
        button.disabled = false;
      }
    }
  }

  // Unblock user function with AJAX
  async function confirmUnblockUser(userId, userName, userEmail) {
    const message = `Are you sure you want to UNBLOCK this user?\n\n` +
                    `Name: ${userName}\n` +
                    `Email: ${userEmail}\n\n` +
                    `This will restore the user's access to their account.`;

    if (confirm(message)) {
      const button = document.querySelector(`[data-user-id="${userId}"].unblock-user-btn`);
      if (!button) return;

      // Add loading state
      button.classList.add('btn-loading');
      button.disabled = true;

      try {
        const response = await fetch('/admin/unblockCustomer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId: userId })
        });

        const result = await response.json();

        if (result.success) {
          showToast(result.message, 'success');
          // Update the button to block
          updateUserButton(userId, true);
        } else {
          showToast(result.message, 'error');
        }
      } catch (error) {
        console.error('Error unblocking user:', error);
        showToast('An error occurred while unblocking the user. Please try again.', 'error');
      } finally {
        // Remove loading state
        button.classList.remove('btn-loading');
        button.disabled = false;
      }
    }
  }

  // Update user button after successful action
  function updateUserButton(userId, showBlockButton) {
    console.log('Updating user button for ID:', userId, 'Show block button:', showBlockButton);
    
    const row = document.querySelector(`tr[data-user-id="${userId}"]`);
    if (!row) {
      console.error('Row not found for user ID:', userId);
      return;
    }

    const actionCell = row.querySelector('td:last-child');
    if (!actionCell) {
      console.error('Action cell not found for user ID:', userId);
      return;
    }

    const userName = row.querySelector('td:first-child').textContent.trim();
    const userEmail = row.querySelector('td:nth-child(2)').textContent.trim();

    console.log('Found user data:', { userName, userEmail });

    if (showBlockButton) {
      // User is now unblocked, show block button
      console.log('Creating block button for user:', userName);
      actionCell.innerHTML = `
        <button
          class="btn btn-danger btn-sm text-white block-user-btn"
          data-user-id="${userId}"
          data-user-name="${userName}"
          data-user-email="${userEmail}"
        >
          Block
        </button>
      `;
    } else {
      // User is now blocked, show unblock button
      console.log('Creating unblock button for user:', userName);
      actionCell.innerHTML = `
        <button
          class="btn btn-success btn-sm text-white unblock-user-btn"
          data-user-id="${userId}"
          data-user-name="${userName}"
          data-user-email="${userEmail}"
        >
          Unblock
        </button>
      `;
    }

    // Re-attach event listener to the new button
    const newButton = actionCell.querySelector('button');
    if (newButton) {
      console.log('Re-attaching event listener to new button');
      newButton.addEventListener('click', function() {
        const userId = this.getAttribute('data-user-id');
        const userName = this.getAttribute('data-user-name');
        const userEmail = this.getAttribute('data-user-email');
        
        if (this.classList.contains('block-user-btn')) {
          confirmBlockUser(userId, userName, userEmail);
        } else {
          confirmUnblockUser(userId, userName, userEmail);
        }
      });
    } else {
      console.error('New button not found after update');
    }
  }
</script>

<%- include("../../views/partials/admin/footer") %>