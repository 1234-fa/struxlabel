<%- include("../../views/partials/admin/header") %>

<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"
  />
  <style>
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background-color: #f8f9fa;
      margin: 0;
      padding: 20px;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .header {
      padding: 24px;
      background: white;
      border-bottom: 1px solid #e9ecef;
    }

    .header h1 {
      margin: 0 0 16px 0;
      font-size: 24px;
      font-weight: 600;
      color: #212529;
    }

    .controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 16px;
      flex-wrap: wrap;
    }

    .search-form {
      display: flex;
      gap: 8px;
      flex: 1;
      max-width: 400px;
    }

    .search-input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 14px;
    }

    .search-input:focus {
      outline: none;
      border-color: #0d6efd;
      box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
    }

    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
    }

    .btn-primary {
      background-color: #0d6efd;
      color: white;
    }

    .btn-primary:hover {
      background-color: #0b5ed7;
    }

    .btn-success {
      background-color: #198754;
      color: white;
    }

    .btn-success:hover {
      background-color: #157347;
    }

    .btn-danger {
      background-color: #dc3545;
      color: white;
    }

    .btn-danger:hover {
      background-color: #bb2d3b;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background-color: #5c636a;
    }

    .btn-info {
      background-color: #0dcaf0;
      color: #000;
    }

    .btn-info:hover {
      background-color: #31d2f2;
    }

    .btn-sm {
      padding: 4px 8px;
      font-size: 12px;
    }

    /* Table Styles */
    .table-container {
      overflow-x: auto;
    }

    .table {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
    }

    .table th,
    .table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e9ecef;
      vertical-align: middle;
    }

    .table th {
      background-color: #f8f9fa;
      font-weight: 600;
      color: #495057;
      font-size: 14px;
      white-space: nowrap;
    }

    .table td {
      font-size: 14px;
      color: #212529;
    }

    .table tbody tr:hover {
      background-color: #f8f9fa;
    }

    .category-name {
      font-weight: 600;
      color: #212529;
    }

    .category-description {
      color: #6c757d;
      max-width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .status-badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 500;
      text-transform: uppercase;
    }

    .status-listed {
      background-color: #d1edff;
      color: #0c63e4;
    }

    .status-unlisted {
      background-color: #f8d7da;
      color: #721c24;
    }

    .offer-percentage {
      font-weight: 600;
      color: #198754;
    }

    .action-buttons {
      display: flex;
      gap: 4px;
      flex-wrap: wrap;
    }

    /* REMOVE old custom modal styles to avoid Bootstrap modal conflict */
    /* .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background: white;
      padding: 24px;
      border-radius: 8px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .modal-content h3 {
      margin: 0 0 20px 0;
      font-size: 18px;
      font-weight: 600;
    } */

    .form-group {
      margin-bottom: 16px;
    }

    .form-label {
      display: block;
      margin-bottom: 4px;
      font-weight: 500;
      color: #212529;
    }

    .form-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 14px;
    }

    .form-control:focus {
      outline: none;
      border-color: #0d6efd;
      box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
    }

    .error-message {
      color: #dc3545;
      font-size: 12px;
      margin-top: 4px;
    }

    .modal-actions {
      display: flex;
      gap: 8px;
      justify-content: flex-end;
      margin-top: 20px;
    }

    .close {
      position: absolute;
      right: 16px;
      top: 16px;
      font-size: 24px;
      cursor: pointer;
      color: #6c757d;
    }

    .close:hover {
      color: #dc3545;
    }

    /* Pagination */
    .pagination-container {
      padding: 20px;
      text-align: center;
      border-top: 1px solid #e9ecef;
    }

    .pagination a,
    .pagination .current-page {
      display: inline-block;
      padding: 8px 12px;
      margin: 0 2px;
      border: 1px solid #dee2e6;
      text-decoration: none;
      color: #6c757d;
      border-radius: 4px;
      transition: all 0.2s;
    }

    .pagination a:hover {
      background-color: #e9ecef;
      border-color: #adb5bd;
    }

    .pagination .current-page {
      background-color: #0d6efd;
      color: white;
      border-color: #0d6efd;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      body {
        padding: 10px;
      }

      .header {
        padding: 16px;
      }

      .controls {
        flex-direction: column;
        align-items: stretch;
      }

      .search-form {
        max-width: none;
      }

      .table th,
      .table td {
        padding: 8px 4px;
        font-size: 12px;
      }

      .category-description {
        max-width: 120px;
      }

      .action-buttons {
        flex-direction: column;
      }

      .action-buttons .btn {
        font-size: 11px;
        padding: 4px 6px;
      }

      .modal-content {
        margin: 20px;
        padding: 20px;
      }
    }

    @media (max-width: 480px) {
      .table {
        font-size: 11px;
      }

      .table th,
      .table td {
        padding: 6px 2px;
      }

      .category-description {
        max-width: 80px;
      }

      .btn-sm {
        padding: 2px 4px;
        font-size: 10px;
      }
    }

    .list-toggle-btn {
      width: 70px;
      min-width: 70px;
      max-width: 70px;
      text-align: center;
    }
    #customToastContainer {
      position: fixed !important;
      top: 20px !important;
      right: 20px !important;
      z-index: 99999 !important;
      pointer-events: none !important;
      width: auto !important;
      max-width: none !important;
    }
    #customToastContainer .custom-toast {
      background: white !important;
      border-radius: 8px !important;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2) !important;
      margin-bottom: 15px !important;
      padding: 16px 20px !important;
      min-width: 320px !important;
      max-width: 400px !important;
      border-left: 4px solid !important;
      animation: customSlideIn 0.4s ease-out !important;
      pointer-events: auto !important;
      position: relative !important;
      opacity: 1 !important;
      transform: translateX(0) !important;
      width: auto !important;
      font-size: 14px !important;
      background-color: white !important;
      background-clip: unset !important;
      border: none !important;
      border-radius: 8px !important;
    }
    #customToastContainer .custom-toast.success {
      border-left-color: #28a745 !important;
      background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%) !important;
    }
    #customToastContainer .custom-toast.error {
      border-left-color: #dc3545 !important;
      background: linear-gradient(135deg, #fff8f8 0%, #ffffff 100%) !important;
    }
    #customToastContainer .custom-toast.warning {
      border-left-color: #ffc107 !important;
      background: linear-gradient(135deg, #fffef8 0%, #ffffff 100%) !important;
    }
    @keyframes customSlideIn {
      from {
        transform: translateX(100%) !important;
        opacity: 0 !important;
      }
      to {
        transform: translateX(0) !important;
        opacity: 1 !important;
      }
    }
    @keyframes customSlideOut {
      from {
        transform: translateX(0) !important;
        opacity: 1 !important;
      }
      to {
        transform: translateX(100%) !important;
        opacity: 0 !important;
      }
    }
    #customToastContainer .custom-toast.fade-out {
      animation: customSlideOut 0.3s ease-in forwards !important;
    }
    #customToastContainer .custom-toast-header {
      display: flex !important;
      justify-content: space-between !important;
      align-items: center !important;
      margin-bottom: 8px !important;
      padding: 0 !important;
      background: none !important;
      border: none !important;
    }
    #customToastContainer .custom-toast-title {
      font-weight: 600 !important;
      font-size: 15px !important;
      color: #333 !important;
    }
    #customToastContainer .custom-toast-close {
      background: none !important;
      border: none !important;
      font-size: 20px !important;
      cursor: pointer !important;
      color: #999 !important;
      padding: 0 !important;
      width: 24px !important;
      height: 24px !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      border-radius: 50% !important;
      transition: all 0.2s ease !important;
      margin: 0 !important;
    }
    #customToastContainer .custom-toast-close:hover {
      background-color: #f0f0f0 !important;
      color: #666 !important;
    }
    #customToastContainer .custom-toast-message {
      font-size: 14px !important;
      color: #555 !important;
      line-height: 1.4 !important;
      padding: 0 !important;
      word-wrap: break-word !important;
    }
    #customToastContainer * {
      box-sizing: border-box !important;
    }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header -->
    <div class="header">
      <h1>Category Management</h1>
      <div class="controls">
        <form method="get" action="/admin/category" class="input-group mb-4" style="max-width:400px;">
          <input type="text" class="form-control" placeholder="Search Category..." id="searchInput" name="search" value="<%= typeof search !== 'undefined' ? search : '' %>">
          <button class="btn btn-outline-secondary" type="submit">Search</button>
        </form>
        <button class="btn btn-success" onclick="openModal()">
          Add Category
        </button>
      </div>
    </div>

    <!-- Table -->
    <div class="table-container">
      <table class="table">
        <thead>
          <tr>
            <th>Category Name</th>
            <th>Description</th>
            <th>Status</th>
            <th>Offer</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <%cat.reverse().forEach((category,index)=>{%>
          <tr data-category-id="<%=category._id%>">
            <td>
              <div class="category-name"><%=category.name%></div>
            </td>
            <td>
              <div class="category-description" title="<%=category.description%>">
                <%=category.description%>
              </div>
            </td>
            <td>
              <span class="status-badge <%if(category.isListed){%>status-listed<%}else{%>status-unlisted<%}%>">
                <%if(category.isListed){%>Listed<%}else{%>Unlisted<%}%>
              </span>
            </td>
            <td>
              <span class="offer-percentage">
                <%if(category.categoryOffer){%><%=category.categoryOffer%>%<%}else{%>0%<%}%>
              </span>
            </td>
            <td>
              <div class="action-buttons">
                <%if(!category.categoryOffer || category.categoryOffer === 0){%>
                <button class="btn btn-info btn-sm" onclick="openCategoryOfferModal('<%=category._id%>', '<%=category.name%>')">
                  Add Offer
                </button>
                <%}else{%>
                <button class="btn btn-danger btn-sm" onclick="removeOffer('<%=category._id%>')">
                  Remove Offer
                </button>
                <%}%>
                
                <%if(category.isListed){%>
                <button class="btn btn-secondary btn-sm list-toggle-btn" data-category-id="<%=category._id%>" data-category-listed="true">Unlist</button>
                <%}else{%>
                <button class="btn btn-success btn-sm list-toggle-btn" data-category-id="<%=category._id%>" data-category-listed="false">List</button>
                <%}%>
                
                <button class="btn btn-primary btn-sm" onclick="openEditModal('<%=category._id%>', '<%=category.name%>', '<%=category.description%>')">
                  Edit
                </button>
              </div>
            </td>
          </tr>
          <%})%>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
      <div class="pagination">
        <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %> 
        <% for (let i = 1; i <= totalPages; i++) { %> 
        <% if (i === currentPage) { %>
        <span class="current-page"><%= i %></span>
        <% } else { %>
        <a href="?page=<%= i %>"><%= i %></a>
        <% } %> 
        <% } %> 
        <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Add Category Modal -->
  <div id="categoryModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h3>Add New Category</h3>
      <form onsubmit="return handleFormSubmit(event)">
        <div class="form-group">
          <label class="form-label">Category Name</label>
          <input type="text" name="name" id="name" class="form-control" />
          <div id="name-error" class="error-message"></div>
        </div>
        <div class="form-group">
          <label class="form-label">Description</label>
          <textarea
            name="description"
            id="descriptionId"
            class="form-control"
            rows="4"
          ></textarea>
          <div id="description-error" class="error-message"></div>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
          <button class="btn btn-primary" type="submit">Create Category</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Category Modal -->
  <div id="categoryEditModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEditModal()">&times;</span>
      <h3>Edit Category</h3>
      <form id="editCategoryForm" onsubmit="handleEditFormSubmit(event)">
        <input type="hidden" id="editCategoryId" />
        <div class="form-group">
          <label for="editCategoryName" class="form-label">Category Name</label>
          <input type="text" id="editCategoryName" class="form-control" />
          <div id="edit-name-error" class="error-message"></div>
        </div>
        <div class="form-group">
          <label for="editCategoryDescription" class="form-label">Description</label>
          <textarea
            id="editCategoryDescription"
            class="form-control"
            rows="4"
          ></textarea>
          <div id="edit-description-error" class="error-message"></div>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Add Category Offer Modal (Bootstrap style, like products.ejs) -->
<div class="modal fade" id="addCategoryOfferModal" tabindex="-1" aria-labelledby="addCategoryOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCategoryOfferModalLabel">Add Offer to Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addCategoryOfferForm">
          <input type="hidden" id="offerCategoryId" name="categoryId">
          <div class="mb-3">
            <label for="offerCategoryName" class="form-label">Category</label>
            <input type="text" class="form-control" id="offerCategoryName" readonly>
          </div>
          <div class="mb-3">
            <label for="categoryOfferPercentage" class="form-label">Offer Percentage (%)</label>
            <input type="number" class="form-control" id="categoryOfferPercentage" name="percentage" min="1" max="100" required>
            <div id="categoryOfferError" class="text-danger mt-1" style="display:none;"></div>
          </div>
          <button type="submit" class="btn btn-primary">Add Offer</button>
        </form>
      </div>
    </div>
  </div>
</div>

  <!-- Custom Toast Container -->
  <div id="customToastContainer"></div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
  <!-- Add jQuery for modal and AJAX support -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function handleFormSubmit(event) {
      event.preventDefault();

      if (!validateForm()) {
        return false;
      }

      const name = document.getElementById("name").value.trim();
      const description = document.getElementById("descriptionId").value.trim();

      fetch("/admin/addCategory", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, description }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.error) {
            throw new Error(data.error);
          }
          location.reload();
        })
        .catch((error) => {
          Swal.fire({
            icon: "error",
            title: "Oops",
            text: error.message || "An error occurred while adding the category",
          });
        });
    }

    function validateForm() {
      clearErrorMessages();
      let isValid = true;

      const nameField = document.getElementById("name");
      const descriptionField = document.getElementById("descriptionId");

      const name = nameField.value.trim();
      const description = descriptionField.value.trim();

      if (name === "") {
        displayErrorMessage("name-error", "Name is required.");
        isValid = false;
      } else if (name.length < 3) {
        displayErrorMessage("name-error", "Name must be at least 3 characters long.");
        isValid = false;
      } else if (!/^[A-Za-z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Name can only contain letters and spaces.");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description-error", "Description is required.");
        isValid = false;
      } else if (description.length < 10) {
        displayErrorMessage("description-error", "Description must be at least 10 characters long.");
        isValid = false;
      } else if (!/^[A-Za-z0-9\s.,'-]+$/.test(description)) {
        displayErrorMessage("description-error", "Description contains invalid characters.");
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(id, message) {
      const errorElement = document.getElementById(id);
      if (errorElement) {
        errorElement.innerText = message;
      }
    }

    function clearErrorMessages() {
      document.getElementById("name-error").innerText = "";
      document.getElementById("description-error").innerText = "";
    }

    document.getElementById("name").addEventListener("input", () => {
      document.getElementById("name-error").innerText = "";
    });

    document.getElementById("descriptionId").addEventListener("input", () => {
      document.getElementById("description-error").innerText = "";
    });

    function openModal() {
      document.getElementById("categoryModal").style.display = "flex";
    }

    function closeModal() {
      document.getElementById("categoryModal").style.display = "none";
    }

    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: "Offer in Percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",
        inputAttributes: {
          min: 1,
          max: 100,
          step: 1,
        },
        preConfirm: (value) => {
          if (!value || value <= 0 || value > 100) {
            Swal.showValidationMessage("Please enter a valid percentage between 1 and 100.");
          }
          return value;
        },
      });

      if (amount) {
        try {
          const response = await fetch("/admin/addCategoryOffer", {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              percentage: amount,
              categoryId: categoryId,
            }),
          });

          const data = await response.json();

          if (response.ok && data.status === true) {
            Swal.fire("Offer Added", "The offer has been successfully added.", "success");
            // TODO: Update the offer badge and buttons in-place here instead of reloading
          } else {
            Swal.fire("Failed", data.message || "Add offer failed", "error");
          }
        } catch (error) {
          Swal.fire("Error", "An error occurred while adding the offer", "error");
          console.log("Error adding offer", error);
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: {
            "content-type": "application/json",
          },
          body: JSON.stringify({
            categoryId: categoryId,
          }),
        });
        const data = await response.json();

        if (response.ok && data.status === true) {
          Swal.fire("Offer removed", "The offer has been removed", "success");
          // Update the offer badge and buttons in-place
          const row = document.querySelector(`tr[data-category-id='${categoryId}']`);
          if (row) {
            // Update offer badge
            const offerCell = row.querySelector(".offer-percentage");
            if (offerCell) {
              offerCell.textContent = "0%";
            }
            // Update action buttons
            const actionDiv = row.querySelector(".action-buttons");
            if (actionDiv) {
              // Replace Remove Offer with Add Offer button
              actionDiv.querySelectorAll("button").forEach(btn => {
                if (btn.textContent.trim() === "Remove Offer") {
                  btn.outerHTML = `<button class='btn btn-info btn-sm' onclick="openCategoryOfferModal('${categoryId}', '${row.querySelector('.category-name').textContent.trim()}')">Add Offer</button>`;
                }
              });
            }
          }
        } else {
          Swal.fire("Failed", data.message || "Removing Offer failed", "error");
        }
      } catch (error) {
        Swal.fire("Error", "An error occur while removing an offer");
        console.error("Error removing offer", error);
      }
    }

    function openEditModal(id, name, description) {
      document.getElementById("editCategoryId").value = id;
      document.getElementById("editCategoryName").value = name;
      document.getElementById("editCategoryDescription").value = description;
      clearEditErrors();
      document.getElementById("categoryEditModal").style.display = "flex";
    }

    function closeEditModal() {
      document.getElementById("categoryEditModal").style.display = "none";
    }

    function clearEditErrors() {
      document.getElementById("edit-name-error").innerText = "";
      document.getElementById("edit-description-error").innerText = "";
    }

    function validateEditForm() {
      clearEditErrors();
      let isValid = true;

      const name = document.getElementById("editCategoryName").value.trim();
      const description = document.getElementById("editCategoryDescription").value.trim();

      if (name === "") {
        document.getElementById("edit-name-error").innerText = "Name is required.";
        isValid = false;
      } else if (name.length < 3) {
        document.getElementById("edit-name-error").innerText = "At least 3 characters.";
        isValid = false;
      } else if (!/^[A-Za-z\s]+$/.test(name)) {
        document.getElementById("edit-name-error").innerText = "Only letters and spaces allowed.";
        isValid = false;
      }

      if (description === "") {
        document.getElementById("edit-description-error").innerText = "Description is required.";
        isValid = false;
      } else if (description.length < 10) {
        document.getElementById("edit-description-error").innerText = "Min 10 characters required.";
        isValid = false;
      }

      return isValid;
    }

    function handleEditFormSubmit(event) {
      event.preventDefault();

      if (!validateEditForm()) return;

      const id = document.getElementById("editCategoryId").value;
      const name = document.getElementById("editCategoryName").value.trim();
      const description = document.getElementById("editCategoryDescription").value.trim();

      fetch(`/admin/editCategory/${id}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, description }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.status === true) {
            Swal.fire("Success", "Category updated successfully", "success").then(() => location.reload());
          } else {
            Swal.fire("Error", data.message || "Update failed", "error");
          }
        })
        .catch((err) => {
          console.error("Edit error:", err);
          Swal.fire("Error", "Something went wrong", "error");
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Attach event delegation for list/unlist buttons
      const tableBody = document.querySelector('.table tbody');
      if (tableBody) {
        tableBody.addEventListener('click', async function(event) {
          const button = event.target.closest('.list-toggle-btn');
          if (!button) return;
          event.preventDefault();
          const categoryId = button.getAttribute('data-category-id');
          const isListed = button.getAttribute('data-category-listed') === 'true';
          // Confirmation prompt
          const actionText = isListed ? 'UNLIST' : 'LIST';
          const confirmMsg = `Are you sure you want to ${actionText} this category?`;
          if (!confirm(confirmMsg)) return;
          button.disabled = true;
          button.classList.add('btn-loading');
          try {
            const url = isListed ? '/admin/unlistCategoryAjax' : '/admin/listCategoryAjax';
            const response = await fetch(url, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ categoryId })
            });
            const result = await response.json();
            if (result.success) {
              showToast(result.message, 'success');
              // Update button in-place
              if (isListed) {
                button.textContent = 'List';
                button.classList.remove('btn-secondary');
                button.classList.add('btn-success');
                button.setAttribute('data-category-listed', 'false');
              } else {
                button.textContent = 'Unlist';
                button.classList.remove('btn-success');
                button.classList.add('btn-secondary');
                button.setAttribute('data-category-listed', 'true');
              }
              // Update status badge in the same row
              const row = button.closest('tr');
              const statusBadge = row.querySelector('.status-badge');
              if (statusBadge) {
                if (isListed) {
                  statusBadge.textContent = 'Unlisted';
                  statusBadge.classList.remove('status-listed');
                  statusBadge.classList.add('status-unlisted');
                } else {
                  statusBadge.textContent = 'Listed';
                  statusBadge.classList.remove('status-unlisted');
                  statusBadge.classList.add('status-listed');
                }
              }
            } else {
              showToast(result.message || 'Action failed', 'error');
            }
          } catch (error) {
            showToast('An error occurred. Please try again.', 'error');
          } finally {
            button.classList.remove('btn-loading');
            button.disabled = false;
          }
        });
      }

      // Update the List/Unlist button and status badge after AJAX
      function updateCategoryButton(categoryId, showUnlistButton) {
        console.log('updateCategoryButton called for', categoryId, 'showUnlistButton:', showUnlistButton);
        const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
        if (!row) { console.log('Row not found for category', categoryId); return; }
        // Update status badge
        const statusCell = row.querySelector('td:nth-child(3) .status-badge');
        if (statusCell) {
          if (showUnlistButton) {
            statusCell.textContent = 'Listed';
            statusCell.classList.remove('status-unlisted');
            statusCell.classList.add('status-listed');
          } else {
            statusCell.textContent = 'Unlisted';
            statusCell.classList.remove('status-listed');
            statusCell.classList.add('status-unlisted');
          }
        }
        // Update action cell
        const actionCell = row.querySelector('td:last-child .action-buttons');
        if (actionCell) {
          // Preserve offer/edit buttons, only replace List/Unlist
          const offerBtn = actionCell.querySelector('[onclick^="openCategoryOfferModal"], [onclick^="removeOffer"]');
          const editBtn = actionCell.querySelector('[onclick^="openEditModal"]');
          let offerHtml = offerBtn ? offerBtn.outerHTML : '';
          let editHtml = editBtn ? editBtn.outerHTML : '';
          let listBtnHtml = '';
          if (showUnlistButton) {
            listBtnHtml = `<button class="btn btn-secondary btn-sm list-toggle-btn" data-category-id="${categoryId}" data-category-listed="true">Unlist</button>`;
          } else {
            listBtnHtml = `<button class="btn btn-success btn-sm list-toggle-btn" data-category-id="${categoryId}" data-category-listed="false">List</button>`;
          }
          actionCell.innerHTML = `${offerHtml} ${listBtnHtml} ${editHtml}`;
          console.log('Updated action cell HTML:', actionCell.innerHTML);
        } else {
          console.log('Action cell not found for category', categoryId);
        }
      }
    });

    $(document).ready(function() {
      // Add Category Offer Modal logic
      window.openCategoryOfferModal = function(categoryId, categoryName) {
        $('#offerCategoryId').val(categoryId);
        $('#offerCategoryName').val(categoryName);
        $('#categoryOfferPercentage').val('');
        $('#categoryOfferError').text('').hide();
        $('#categoryOfferPercentage').removeClass('is-invalid');
        const modal = new bootstrap.Modal(document.getElementById('addCategoryOfferModal'));
        modal.show();
      };

      $('#addCategoryOfferForm').on('submit', function(e) {
        e.preventDefault();
        const categoryId = $('#offerCategoryId').val();
        const percentage = $('#categoryOfferPercentage').val();
        $('#categoryOfferError').text('').hide();
        $('#categoryOfferPercentage').removeClass('is-invalid');
        if (!percentage || isNaN(percentage) || percentage < 1 || percentage > 100) {
          $('#categoryOfferError').text('Please enter a valid offer percentage between 1 and 100.').show();
          $('#categoryOfferPercentage').addClass('is-invalid');
          return;
        }
        $.ajax({
          url: '/admin/addCategoryOffer',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({ categoryId, percentage }),
          success: function(response) {
            if (response.status === true) {
              const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryOfferModal'));
              modal.hide();
              Swal.fire('Offer Added', 'The offer has been successfully added.', 'success').then(() => location.reload());
            } else {
              $('#categoryOfferError').text(response.message || 'Unable to add offer. Please try again.').show();
              $('#categoryOfferError').addClass('text-danger');
              $('#categoryOfferPercentage').addClass('is-invalid');
            }
          },
          error: function(xhr) {
            let msg = 'Something went wrong while adding the offer. Please try again.';
            if (xhr.responseJSON && xhr.responseJSON.message) {
              msg = xhr.responseJSON.message;
            }
            $('#categoryOfferError').text(msg).show();
            $('#categoryOfferError').addClass('text-danger');
            $('#categoryOfferPercentage').addClass('is-invalid');
          }
        });
      });
    });

    window.addEventListener('beforeunload', function(e) {
      console.log('⚠️ Page is reloading!');
    });

    document.addEventListener('submit', function(e) {
      console.log('⚠️ Form submitted:', e.target);
    });

    // Custom Toast notification function
    function showToast(message, type = 'success') {
      let toastContainer = document.getElementById('customToastContainer');
      if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'customToastContainer';
        document.body.appendChild(toastContainer);
      }
      const toast = document.createElement('div');
      toast.className = `custom-toast ${type}`;
      const title = type === 'success' ? 'Success' : type === 'error' ? 'Error' : 'Warning';
      const icon = type === 'success' ? '✓' : type === 'error' ? '✕' : '⚠';
      toast.innerHTML = `
        <div class="custom-toast-header">
          <span class="custom-toast-title">${icon} ${title}</span>
          <button class="custom-toast-close" onclick="removeCustomToast(this.parentElement.parentElement)">&times;</button>
        </div>
        <div class="custom-toast-message">${message}</div>
      `;
      toastContainer.appendChild(toast);
      setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
      }, 10);
      // Auto remove after 1 second
      const autoRemoveTimer = setTimeout(() => {
        removeCustomToast(toast);
      }, 1000);
      toast.autoRemoveTimer = autoRemoveTimer;
      toast.addEventListener('mouseenter', () => {
        clearTimeout(toast.autoRemoveTimer);
      });
      toast.addEventListener('mouseleave', () => {
        toast.autoRemoveTimer = setTimeout(() => {
          removeCustomToast(toast);
        }, 5000);
      });
    }
    function removeCustomToast(toast) {
      if (!toast || !toast.parentElement) return;
      if (toast.autoRemoveTimer) clearTimeout(toast.autoRemoveTimer);
      toast.classList.add('fade-out');
      setTimeout(() => {
        if (toast.parentElement) toast.remove();
      }, 300);
    }
  </script>

  <%- include("../../views/partials/admin/footer") %>
</body>