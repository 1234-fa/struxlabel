<%- include("../../views/partials/admin/header") %>
<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"
  />
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    rel="stylesheet"
  />
  <style>
    body {
      background-color: #f8f9fa;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
        sans-serif;
    }

    .content-header {
      background-color: #fff;
      padding: 15px 20px;
      border-bottom: 1px solid #dee2e6;
      margin-bottom: 20px;
    }

    .content-title {
      font-size: 24px;
      font-weight: 600;
      margin: 0;
      color: #2c3e50;
    }

    .card-header {
      background: #fff;
      padding: 15px 20px;
      border-bottom: 1px solid #dee2e6;
      margin-bottom: 20px;
    }

    .input-group {
      max-width: 400px;
    }

    .form-control {
      border: 1px solid #ced4da;
      border-radius: 6px;
      padding: 8px 12px;
      font-size: 14px;
    }

    .form-control:focus {
      border-color: #6c757d;
      box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.25);
    }

    .btn {
      font-size: 13px;
      padding: 6px 12px;
      border-radius: 4px;
      font-weight: 500;
    }

    .btn-primary {
      background-color: #6c757d;
      border-color: #6c757d;
    }

    .btn-primary:hover {
      background-color: #5a6268;
      border-color: #545b62;
    }

    .btn-info {
      background-color: #17a2b8;
      border-color: #17a2b8;
    }

    .btn-info:hover {
      background-color: #138496;
      border-color: #117a8b;
    }

    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
    }

    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
    }

    .btn-success {
      background-color: #28a745;
      border-color: #28a745;
    }

    .btn-success:hover {
      background-color: #218838;
      border-color: #1e7e34;
    }

    .right {
      padding: 0 20px;
      margin-top: 0;
    }

    .table {
      background: #fff;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      overflow: hidden;
      font-size: 14px;
    }

    .table thead th {
      background-color: #f8f9fa;
      color: #495057;
      font-weight: 600;
      font-size: 13px;
      padding: 12px 8px;
      border-bottom: 1px solid #dee2e6;
    }

    .table tbody td {
      padding: 10px 8px;
      vertical-align: middle;
      border-bottom: 1px solid #f1f3f4;
    }

    .table tbody tr:hover {
      background-color: #f8f9fa;
    }

    .table tbody td img {
      width: 45px;
      height: 45px;
      object-fit: cover;
      border-radius: 4px;
      border: 1px solid #dee2e6;
    }

    .variants-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .variants-list li {
      background: #f8f9fa;
      padding: 2px 6px;
      margin: 1px 0;
      border-radius: 3px;
      font-size: 11px;
      display: inline-block;
      margin-right: 3px;
      border: 1px solid #e9ecef;
    }

    .offer-badge {
      background-color: #fff3cd;
      color: #856404;
      padding: 2px 6px;
      border-radius: 3px;
      font-size: 11px;
      font-weight: 500;
      border: 1px solid #ffeaa7;
    }

    .category-badge {
      background-color: #d1ecf1;
      color: #0c5460;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 500;
      border: 1px solid #bee5eb;
    }

    .price-text {
      font-weight: 600;
      color: #28a745;
      font-size: 14px;
    }

    .brand-name {
      color: #6c757d;
      font-size: 13px;
    }

    .product-name {
      font-weight: 500;
      color: #495057;
      font-size: 13px;
    }

    .pagination {
      justify-content: center;
      margin-top: 20px;
    }

    .page-link {
      color: #6c757d;
      border: 1px solid #dee2e6;
      padding: 6px 12px;
      font-size: 14px;
    }

    .page-link:hover {
      color: #495057;
      background-color: #f8f9fa;
      border-color: #dee2e6;
    }

    .page-item.active .page-link {
      background-color: #6c757d;
      border-color: #6c757d;
      color: #fff;
    }

    .btn a {
      color: inherit;
      text-decoration: none;
    }

    .btn a:hover {
      color: inherit;
    }

    @media (max-width: 768px) {
      .card-header {
        flex-direction: column;
        gap: 10px;
      }

      .input-group {
        max-width: 100%;
      }

      .right {
        padding: 0 10px;
      }

      .table {
        font-size: 12px;
      }

      .table thead th {
        padding: 8px 4px;
        font-size: 11px;
      }

      .table tbody td {
        padding: 8px 4px;
      }
    }
  </style>
</head>

<div class="content-header">
  <h2 class="content-title">Products</h2>
</div>

<header
  class="card-header d-flex justify-content-between align-items-center mb-4 px-4"
>
  <form action="" method="get" class="d-inline">
    <div
      class="input-group input-group-sm border border-1 border-grey rounded-pill"
      style="width: 400px"
    >
      <input
        type="text"
        class="form-control border-0 rounded-pill"
        placeholder="Search products or brands"
        name="search"
      />
      <button class="btn border-0" type="submit">Search</button>
    </div>
  </form>

  <a
    href="/admin/addProducts"
    class="btn btn-primary"
    style="border-radius: 20px"
    >+ Add Product</a
  >
</header>

<div class="right mt-5">
  <table class="table table-striped">
    <thead>
      <tr>
        <th scope="col">Product</th>
        <th scope="col">Product name</th>
        <th scope="col">Brand</th>
        <th scope="col">Category</th>
        <th scope="col">Sale Price</th>
        <th scope="col">Offer Price</th>
        <th scope="col">Variant / Quantity</th>
        <th scope="col">Offer</th>
        <th scope="col">Action</th>
        <th scope="col">Edit</th>
      </tr>
    </thead>
    <tbody>
      <% for (let i = 0; i < data.length; i++) { %>
      <tr data-product-id="<%= data[i]._id %>">
        <td>
          <img
            src="<%= data[i].productImages[0] %>"
            alt="Product"
            class="me-3"
            style="
              width: 45px;
              height: 45px;
              object-fit: cover;
              border-radius: 4px;
            "
          />
        </td>
        <td class="product-name"><%=data[i].productName%></td>
        <td class="brand-name"><%=data[i].brand%></td>
        <td><span class="category-badge"><%=data[i].category.name%></span></td>
        <td class="price-text">₹<%=data[i].salePrice%></td>
        <td>
          <%if(locals.data[i].productOffer){%>
          <span class="offer-badge"><%=data[i].productOffer%>%</span>
          <%}else{%>
          <span class="offer-badge">0%</span>
          <%}%>
        </td>
        <td>
          <ul class="mb-5 ps-3 variants-list">
            <% if (data[i].variants) { %> <% // Convert Map to Object if needed
            const variants = data[i].variants instanceof Map ?
            Object.fromEntries(data[i].variants) : data[i].variants; %> <%
            Object.entries(variants).forEach(([size, quantity]) => { %>
            <li><%= size %>: <%= quantity %></li>
            <% }) %> <% } %>
          </ul>
        </td>
        <td>
          <% if (locals.data[i].productOffer === 0) { %>
          <button
            class="btn btn-info text-white"
            onclick="addOffer('<%=data[i]._id%>')"
            style="width: 90px"
          >
            Add Offer
          </button>
          <%}else{%>
          <button
            class="btn btn-info text-white"
            onclick="removerOffer('<%=data[i]._id%>')"
            style="width: 90px"
          >
            Remove
          </button>
          <%}%>
        </td>
        <td>
          <%if(data[i].isBlocked===false){%>
          <button 
            class="btn btn-danger block-product-btn" 
            style="width: 70px"
            data-product-id="<%=data[i]._id%>"
            data-product-name="<%=data[i].productName%>"
          >
            <span class="text-white">Block</span>
          </button>
          <%}else{%>
          <button 
            class="btn btn-success unblock-product-btn" 
            style="width: 70px"
            data-product-id="<%=data[i]._id%>"
            data-product-name="<%=data[i].productName%>"
          >
            <span class="text-white">Unblock</span>
          </button>
          <%}%>
        </td>
        <td>
          <button class="btn btn-info" style="width: 70px">
            <a
              href="/admin/editProduct?id=<%=data[i]._id%>"
              class="text-white"
              style="text-decoration: none"
              >Edit</a
            >
          </button>
        </td>
      </tr>
      <%}%>
    </tbody>
  </table>
</div>

<div class="container mt-3">
  <nav aria-label="Page navigation">
    <ul
      class="pagination justify-content-center mb-20"
      style="margin-right: 200px"
    >
      <% for (let i = 1; i <= totalPages; i++) { %>
      <li class="page-item <%=(i === currentPage) ? 'active' : '' %>">
        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
      </li>
      <% } %>
    </ul>
  </nav>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<style>
  /* Loading state styles */
  .btn-loading {
    position: relative;
    pointer-events: none;
    opacity: 0.7;
  }

  .btn-loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Custom Toast notification styles - Override Bootstrap */
  #customToastContainer {
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    z-index: 99999 !important;
    pointer-events: none !important;
    width: auto !important;
    max-width: none !important;
  }

  #customToastContainer .custom-toast {
    background: white !important;
    border-radius: 8px !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2) !important;
    margin-bottom: 15px !important;
    padding: 16px 20px !important;
    min-width: 320px !important;
    max-width: 400px !important;
    border-left: 4px solid !important;
    animation: customSlideIn 0.4s ease-out !important;
    pointer-events: auto !important;
    position: relative !important;
    opacity: 1 !important;
    transform: translateX(0) !important;
    width: auto !important;
    font-size: 14px !important;
    background-color: white !important;
    background-clip: unset !important;
    border: none !important;
    border-radius: 8px !important;
  }

  #customToastContainer .custom-toast.success {
    border-left-color: #28a745 !important;
    background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%) !important;
  }

  #customToastContainer .custom-toast.error {
    border-left-color: #dc3545 !important;
    background: linear-gradient(135deg, #fff8f8 0%, #ffffff 100%) !important;
  }

  #customToastContainer .custom-toast.warning {
    border-left-color: #ffc107 !important;
    background: linear-gradient(135deg, #fffef8 0%, #ffffff 100%) !important;
  }

  @keyframes customSlideIn {
    from {
      transform: translateX(100%) !important;
      opacity: 0 !important;
    }
    to {
      transform: translateX(0) !important;
      opacity: 1 !important;
    }
  }

  @keyframes customSlideOut {
    from {
      transform: translateX(0) !important;
      opacity: 1 !important;
    }
    to {
      transform: translateX(100%) !important;
      opacity: 0 !important;
    }
  }

  #customToastContainer .custom-toast.fade-out {
    animation: customSlideOut 0.3s ease-in forwards !important;
  }

  #customToastContainer .custom-toast-header {
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
    margin-bottom: 8px !important;
    padding: 0 !important;
    background: none !important;
    border: none !important;
  }

  #customToastContainer .custom-toast-title {
    font-weight: 600 !important;
    font-size: 15px !important;
    color: #333 !important;
  }

  #customToastContainer .custom-toast-close {
    background: none !important;
    border: none !important;
    font-size: 20px !important;
    cursor: pointer !important;
    color: #999 !important;
    padding: 0 !important;
    width: 24px !important;
    height: 24px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    border-radius: 50% !important;
    transition: all 0.2s ease !important;
    margin: 0 !important;
  }

  #customToastContainer .custom-toast-close:hover {
    background-color: #f0f0f0 !important;
    color: #666 !important;
  }

  #customToastContainer .custom-toast-message {
    font-size: 14px !important;
    color: #555 !important;
    line-height: 1.4 !important;
    padding: 0 !important;
    word-wrap: break-word !important;
  }

  /* Ensure toasts are always visible */
  #customToastContainer * {
    box-sizing: border-box !important;
  }
</style>

<!-- Custom Toast Container -->
<div id="customToastContainer"></div>

<script>
  // Initialize AJAX event handlers when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initializeProductAjaxHandlers();
  });

  // Custom Toast notification function
  function showToast(message, type = 'success') {
    console.log(`🍞 Showing custom toast: ${type} - ${message}`);
    
    let toastContainer = document.getElementById('customToastContainer');
    if (!toastContainer) {
      console.log('📦 Creating custom toast container');
      toastContainer = document.createElement('div');
      toastContainer.id = 'customToastContainer';
      document.body.appendChild(toastContainer);
    }
    
    const toast = document.createElement('div');
    toast.className = `custom-toast ${type}`;
    
    const title = type === 'success' ? 'Success' : type === 'error' ? 'Error' : 'Warning';
    const icon = type === 'success' ? '✓' : type === 'error' ? '✕' : '⚠';
    
    toast.innerHTML = `
      <div class="custom-toast-header">
        <span class="custom-toast-title">${icon} ${title}</span>
        <button class="custom-toast-close" onclick="removeCustomToast(this.parentElement.parentElement)">&times;</button>
      </div>
      <div class="custom-toast-message">${message}</div>
    `;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    console.log(`✅ Custom toast added to DOM. Total toasts: ${toastContainer.children.length}`);
    
    // Force immediate visibility
    setTimeout(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateX(0)';
    }, 10);
    
    // Auto remove after 10 seconds (increased for better visibility)
    const autoRemoveTimer = setTimeout(() => {
      removeCustomToast(toast);
    }, 10000);
    
    // Store timer reference for manual removal
    toast.autoRemoveTimer = autoRemoveTimer;
    
    // Add hover pause functionality
    toast.addEventListener('mouseenter', () => {
      console.log('🖱️ Custom toast hovered - pausing auto-remove');
      clearTimeout(toast.autoRemoveTimer);
    });
    
    toast.addEventListener('mouseleave', () => {
      console.log('🖱️ Custom toast unhovered - resuming auto-remove');
      toast.autoRemoveTimer = setTimeout(() => {
        removeCustomToast(toast);
      }, 5000); // Give 5 more seconds after hover
    });
  }
  
  // Function to remove custom toast with animation
  function removeCustomToast(toast) {
    if (!toast || !toast.parentElement) {
      console.log('❌ Custom toast already removed or invalid');
      return;
    }
    
    console.log('🗑️ Removing custom toast');
    
    // Clear any pending timers
    if (toast.autoRemoveTimer) {
      clearTimeout(toast.autoRemoveTimer);
    }
    
    // Add fade-out animation
    toast.classList.add('fade-out');
    
    // Remove from DOM after animation
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
        console.log('✅ Custom toast removed from DOM');
      }
    }, 300);
  }

  // Initialize AJAX event handlers
  function initializeProductAjaxHandlers() {
    // Block product buttons
    document.querySelectorAll('.block-product-btn').forEach(button => {
      button.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        const productName = this.getAttribute('data-product-name');
        
        confirmBlockProduct(productId, productName);
      });
    });

    // Unblock product buttons
    document.querySelectorAll('.unblock-product-btn').forEach(button => {
      button.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        const productName = this.getAttribute('data-product-name');
        
        confirmUnblockProduct(productId, productName);
      });
    });
  }

  // Block product function with AJAX
  async function confirmBlockProduct(productId, productName) {
    const message = `Are you sure you want to BLOCK this product?\n\n` +
                    `Product: ${productName}\n\n` +
                    `This will prevent the product from being displayed to customers.`;

    if (confirm(message)) {
      const button = document.querySelector(`[data-product-id="${productId}"].block-product-btn`);
      if (!button) return;

      // Add loading state
      button.classList.add('btn-loading');
      button.disabled = true;

      try {
        const response = await fetch('/admin/blockProduct', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId: productId })
        });

        const result = await response.json();

        if (result.success) {
          showToast(result.message, 'success');
          // Update the button to unblock
          updateProductButton(productId, false);
        } else {
          showToast(result.message, 'error');
        }
      } catch (error) {
        console.error('Error blocking product:', error);
        showToast('An error occurred while blocking the product. Please try again.', 'error');
      } finally {
        // Remove loading state
        button.classList.remove('btn-loading');
        button.disabled = false;
      }
    }
  }

  // Unblock product function with AJAX
  async function confirmUnblockProduct(productId, productName) {
    const message = `Are you sure you want to UNBLOCK this product?\n\n` +
                    `Product: ${productName}\n\n` +
                    `This will restore the product's visibility to customers.`;

    if (confirm(message)) {
      const button = document.querySelector(`[data-product-id="${productId}"].unblock-product-btn`);
      if (!button) return;

      // Add loading state
      button.classList.add('btn-loading');
      button.disabled = true;

      try {
        const response = await fetch('/admin/unblockProduct', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId: productId })
        });

        const result = await response.json();

        if (result.success) {
          showToast(result.message, 'success');
          // Update the button to block
          updateProductButton(productId, true);
        } else {
          showToast(result.message, 'error');
        }
      } catch (error) {
        console.error('Error unblocking product:', error);
        showToast('An error occurred while unblocking the product. Please try again.', 'error');
      } finally {
        // Remove loading state
        button.classList.remove('btn-loading');
        button.disabled = false;
      }
    }
  }

  // Update product button after successful action
  function updateProductButton(productId, showBlockButton) {
    const row = document.querySelector(`tr[data-product-id="${productId}"]`);
    if (!row) {
      console.error('Row not found for product ID:', productId);
      return;
    }

    const actionCell = row.querySelector('td:nth-last-child(2)'); // Action column
    if (!actionCell) {
      console.error('Action cell not found for product ID:', productId);
      return;
    }

    const productName = row.querySelector('.product-name').textContent.trim();

    if (showBlockButton) {
      // Product is now unblocked, show block button
      actionCell.innerHTML = `
        <button 
          class="btn btn-danger block-product-btn" 
          style="width: 70px"
          data-product-id="${productId}"
          data-product-name="${productName}"
        >
          <span class="text-white">Block</span>
        </button>
      `;
    } else {
      // Product is now blocked, show unblock button
      actionCell.innerHTML = `
        <button 
          class="btn btn-success unblock-product-btn" 
          style="width: 70px"
          data-product-id="${productId}"
          data-product-name="${productName}"
        >
          <span class="text-white">Unblock</span>
        </button>
      `;
    }

    // Re-attach event listener to the new button
    const newButton = actionCell.querySelector('button');
    if (newButton) {
      newButton.addEventListener('click', function() {
        const productId = this.getAttribute('data-product-id');
        const productName = this.getAttribute('data-product-name');
        
        if (this.classList.contains('block-product-btn')) {
          confirmBlockProduct(productId, productName);
        } else {
          confirmUnblockProduct(productId, productName);
        }
      });
    }
  }

  async function addOffer(productId) {
    const { value: amount } = await Swal.fire({
      title: "Offer in percentage",
      input: "number",
      inputLabel: "Percentage",
      inputPlaceholder: "%",
      inputAttributes: {
        min: 1,
        max: 100,
        step: 1,
      },
      showCancelButton: true,
    });

    if (!amount || isNaN(amount) || amount <= 0 || amount > 100) {
      Swal.fire(
        "Invalid input",
        "Please enter a valid percentage between 1 and 100",
        "warning"
      );
      return;
    }

    $.ajax({
      url: "/admin/addProductOffer",
      method: "POST",
      data: {
        percentage: amount,
        productId: productId,
      },
      success: (response) => {
        if (response.status === true) {
          Swal.fire(
            "Offer Added",
            "The offer has been successfully added",
            "success"
          ).then(() => location.reload());
        } else {
          Swal.fire(
            "Failed",
            response.message || "Unable to add offer",
            "error"
          );
        }
      },
      error: (err) => {
        console.error(err);
        Swal.fire("Error", "Something went wrong", "error");
      },
    });
  }
  function removerOffer(productId) {
    try {
      Swal.fire({
        title: "Remove Offer",
        text: "Are you sure you want to remove this offer",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, remove it!",
        timer: 5000,
        timerProgressBar: true,
      }).then(async (result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: "/admin/removeProductOffer",
            method: "post",
            data: {
              productId: productId,
            },
            success: (response) => {
              if (response.status === true) {
                Swal.fire("Removed!", "The offer has been removed", "Success");
                location.reload();
              } else if (response.status === false) {
                Swal.fire("failed");
              } else {
                alert("failed");
              }
            },
          });
        }
      });
    } catch (error) {
      console.error(error);
    }
  }
</script>

<%- include("../../views/partials/admin/footer") %>
