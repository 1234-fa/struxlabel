<%- include("../../views/partials/user/header") %>
<style>
/* Custom Bootstrap overrides and minimal styles */
body {
  background-color: #f8f9fa;
  font-family: 'Roboto', Arial, sans-serif;
}

.cart-card {
  box-shadow: 0 2px 4px rgba(0,0,0,.08);
  border: none;
  border-radius: 2px;
}

.item-image {
  width: 100px;
  height: 120px;
  border-radius: 4px;
  overflow: hidden;
  border: 1px solid #e0e0e0;
  transition: all 0.3s ease;
}

.item-image:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
  transform: scale(1.02);
}

.item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.qty-controls {
  border: 2px solid #e0e0e0;
  border-radius: 6px;
  overflow: hidden;
  width: fit-content;
}

.qty-btn {
  width: 36px;
  height: 36px;
  border: none;
  background: white;
  color: #666;
  font-weight: 600;
  transition: all 0.2s ease;
}

.qty-btn:hover:not(:disabled) {
  background: #2874f0;
  color: white;
}

.qty-input {
  width: 50px;
  height: 36px;
  text-align: center;
  border: none;
  border-left: 1px solid #e0e0e0;
  border-right: 1px solid #e0e0e0;
  background: #f8f9fa !important;
  font-size: 0.85rem;
  font-weight: 600;
  color: #333;
  cursor: default;
  user-select: none;
}

/* Fixed remove button positioning */
.cart-item-wrapper {
  position: relative;
}

.remove-btn {
  background: none !important;
  border: none !important;
  color: #060606 !important;
  font-size: 18px;
  font-weight: bold;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  padding: 0;
  position: absolute;
  top: 12px;
  right: 12px;
  z-index: 10;
}

.stock-status {
  font-size: 10px;
  font-weight: 600;
  padding: 3px 6px;
  border-radius: 4px;
  text-transform: uppercase;
  letter-spacing: 0.3px;
}

.stock-low { color: #f57c00; background: #fff3e0; border: 1px solid #ffcc02; }
.stock-out { color: #d32f2f; background: #ffebee; border: 1px solid #ffcdd2; }

.price-original { color: #878787; text-decoration: line-through; font-size: 0.9em; }
.item-total-price { background: #f0f7ff; border: 1px solid #e3f2fd; }

.checkout-btn {
  background: #fb641b;
  border: none;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: background-color 0.2s;
}

.checkout-btn:hover { background: #e85d1c; }
.continue-shopping { background: #2874f0; }
.continue-shopping:hover { background: #1c5fb5; }

/* Sticky Price Details */
.price-details-sticky {
  position: sticky;
  top: 80px;
  z-index: 100;
  max-height: calc(100vh - 100px);
  overflow-y: auto;
}

/* Smooth scrolling for the sticky element */
.price-details-sticky {
  transition: all 0.3s ease;
}

/* Enhanced shadow when sticky */
.price-details-sticky.is-sticky {
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  transform: translateY(0);
}

.error-msg {
  font-size: 11px;
  color: #d32f2f;
  background: #ffebee;
  border-left: 3px solid #f44336;
}



/* Tablet responsive */
@media (max-width: 768px) {
  .price-details-sticky {
    position: static;
    top: auto;
    max-height: none;
    margin-top: 1rem;
  }
}

@media (max-width: 576px) {
  .item-image { width: 80px; height: 100px; }
  .qty-controls { transform: scale(0.9); }
  .remove-btn {
    top: 8px;
    right: 8px;
    width: 28px;
    height: 28px;
    font-size: 16px;
  }

  /* Ensure price details are not sticky on mobile */
  .price-details-sticky {
    position: static;
    top: auto;
    max-height: none;
    margin-top: 1rem;
  }
}
</style>

<main class="py-4">
  <div class="container">
    <!-- Page Header -->
    <div class="row mb-4">
      <div class="col-12">
        <h1 class="h4 fw-bold text-dark mb-0">My Cart</h1>
      </div>
    </div>

    <% let hasInsufficientStock = false; %>

    <% if (cartItems.length === 0) { %>
      <!-- Empty Cart State -->
      <div class="row justify-content-center">
        <div class="col-lg-6">
          <div class="card cart-card text-center py-5">
            <div class="card-body">
              <i class="fas fa-shopping-cart display-1 text-muted mb-4"></i>
              <h2 class="h4 fw-semibold mb-3">Your cart is empty!</h2>
              <p class="text-muted mb-4">Add items to it now.</p>
              <a href="/shop" class="btn btn-primary continue-shopping px-4">Shop now</a>
            </div>
          </div>
        </div>
      </div>
    <% } else { %>
      <!-- Cart Layout -->
      <div class="row g-4">
        <!-- Cart Items Section -->
        <div class="col-lg-8">
          <div class="card cart-card">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
              <h6 class="mb-0 fw-semibold small">Cart Items (<%= cartItems.length %>)</h6>
            </div>
            
            <div class="card-body p-0">
              <% cartItems.forEach(item => { %>
                <div class="border-bottom p-3 p-md-4 cart-item-wrapper">
                  <!-- Remove Button - Fixed positioning -->
                  <button type="button" class="btn remove-btn" title="Remove item" 
                          onclick="removeCartItem('<%= item._id %>')">X</button>

                  <div class="row g-3 align-items-start">
                    <!-- Product Image -->
                    <div class="col-auto">
                      <div class="item-image">
                        <a href="/productDetails?id=<%= item.productId._id %>">
                          <img src="<%= item.productId.productImages[0] %>" alt="<%= item.productId.productName %>" class="img-fluid">
                        </a>
                      </div>
                    </div>

                    <!-- Product Details -->
                    <div class="col">
                      <div class="row">
                        <div class="col-lg-8">
                          <a href="/productDetails?id=<%= item.productId._id %>" class="text-decoration-none text-dark">
                            <h6 class="fw-semibold mb-2 pe-5 small"><%= item.productId.productName %></h6>
                          </a>
                          <p class="text-muted mb-2" style="font-size: 0.75rem;">Brand: <%= item.productId.brand %></p>
                          <p class="text-muted mb-2" style="font-size: 0.75rem;"><%= item.productId.longDescription %></p>
                          <div class="mt-3">
                            <span class="fw-bold text-primary" style="font-size: 0.9rem;">₹<%= item.productId.salePrice %></span>
                            <span class="price-original ms-2" style="font-size: 0.8rem;">₹<%= item.productId.regularPrice %></span>
                          </div>

                          <div class="mt-2 d-flex flex-wrap gap-2">
                            <small class="badge bg-light text-dark" style="font-size: 0.7rem;">
                              <strong>Size:</strong> <%= item.variant.size %>
                            </small>
                            <small class="badge bg-light text-dark" style="font-size: 0.7rem;">
                              <strong>Qty:</strong> <%= item.quantity %>
                            </small>
                          </div>
                        </div>

                        <!-- Actions Column -->
                        <div class="col-lg-4 mt-4">
                          <div class="d-flex flex-column gap-3 align-items-lg-end">
                            <%
                              let selectedSize = item.variant.size;
                              let sizeExists = false;
                              let selectedStock = 0;

                              if (item.productId.variants) {
                                for (const [size, stock] of item.productId.variants) {
                                  if (size === selectedSize) {
                                    sizeExists = true;
                                    selectedStock = stock;
                                    break;
                                  }
                                }
                              }
                            %>

                            <!-- Stock Status -->
                            <% if (!sizeExists) { %>
                              <span class="stock-status stock-out">Size unavailable</span>
                            <% } else if (selectedStock === 0) { %>
                              <span class="stock-status stock-out">Out of Stock</span>
                            <% } else if (selectedStock <= 5) { %>
                              <span class="stock-status stock-low">Only <%= selectedStock %> left</span>
                            <% } %>

                            <!-- Quantity Controls -->
                            <div class="qty-controls d-flex"
                                 data-item-id="<%= item._id %>"
                                 data-stock="<%= item.productId.variants ? item.productId.variants.get(item.variant.size) || 0 : item.productId.quantity %>">
                              <button class="qty-btn" id="minus-<%= item._id %>" onclick="changeQty('<%= item._id %>', -1)">−</button>
                              <input type="number" class="qty-input" id="qty-<%= item._id %>"
                                     value="<%= item.quantity %>" min="1" max="10"
                                     readonly style="background-color: #f8f9fa; cursor: default;"/>
                              <button class="qty-btn" id="plus-<%= item._id %>" onclick="changeQty('<%= item._id %>', 1)">+</button>
                            </div>

                            <!-- Size Selection -->
                            <select class="form-select-sm" id="size-<%= item._id %>"
                                    onchange="changeVariant('<%= item._id %>')" style="max-width: 150px; font-size: 0.8rem;">
                              <% if (item.productId.variants) { %>
                                <% for (const [size, stock] of item.productId.variants) { %>
                                  <option value="<%= size %>" <%= item.variant.size === size ? 'selected' : '' %>
                                          <%= stock === 0 ? 'disabled' : '' %>>
                                    <%= size %> <%= stock === 0 ? '(Out of Stock)' : `(${stock} in stock)` %>
                                  </option>
                                <% } %>
                              <% } %>
                            </select>

                            <!-- Total Price -->
                            <div class="p-2 rounded text-center item-total-price fw-bold text-primary" style="font-size: 0.85rem;">
                              Total: ₹<%= item.totalPrice %>
                            </div>

                            <!-- Error Messages -->
                            <div id="error-msg-<%= item._id %>" class="error-msg p-2 rounded d-none" style="font-size: 0.75rem;"></div>

                            <% if (!sizeExists) { %>
                              <% hasInsufficientStock = true; %>
                              <div class="error-msg p-2 rounded" style="font-size: 0.75rem;">
                                Selected size "<%= selectedSize %>" is no longer available. Please choose another size.
                              </div>
                            <% } else if (selectedStock === 0 || item.quantity > selectedStock) { %>
                              <% hasInsufficientStock = true; %>
                              <div class="error-msg p-2 rounded" style="font-size: 0.75rem;">
                                <%= selectedStock === 0 ? 'Selected variant is out of stock.' : 'Insufficient stock available for the selected variant. Please reduce the quantity to proceed with your order.' %>
                              </div>
                            <% } %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
          <div class="card cart-card price-details-sticky">
            <div class="card-header bg-light">
              <h6 class="mb-0 text-muted text-uppercase small">Price Details</h6>
            </div>

            <div class="card-body">
              <div class="d-flex justify-content-between mb-3" style="font-size: 0.85rem;">
                <span>Price (<%= cartItems.length %> items)</span>
                <span>₹<%= Math.round(total * 1.2) %></span>
              </div>

              <div class="d-flex justify-content-between mb-3" style="font-size: 0.85rem;">
                <span>Discount</span>
                <span class="text-success">-₹<%= Math.round(total * 0.2) %></span>
              </div>

              <div class="d-flex justify-content-between mb-3" style="font-size: 0.85rem;">
                <span>Delivery Charges</span>
                <% if(total <= 2000) { %>
                  <span>₹54</span>
                <% } else { %>
                  <span class="text-success">FREE</span>
                <% } %>
              </div>

              <hr>

              <div class="d-flex justify-content-between fw-bold" style="font-size: 0.9rem;">
                <span>Total Amount</span>
                <%if(total<=2000){%>
                  <span>₹<%= total + 54 %></span>
                <%}else{%>
                  <span>₹<%= total %></span>
                <%}%>
              </div>
            </div>
            
            <div class="card-footer bg-white">
              <% if (hasInsufficientStock) { %>
                <div class="alert alert-danger py-2 mb-3" style="font-size: 0.8rem;">
                  <small>Some items in your cart have insufficient stock. Please review and update quantities.</small>
                </div>
                <button class="btn checkout-btn w-100 py-3" disabled style="font-size: 0.9rem;">Place Order</button>
              <% } else { %>
                <a href="/orderOfCart" class="btn checkout-btn w-100 py-3 text-white text-decoration-none" style="font-size: 0.9rem;">Place Order</a>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    <% } %>
  </div>
</main>

<script>
// Updated quantity control function that considers variant stock
function changeQty(id, delta) {
  const input = document.getElementById('qty-' + id);
  const control = document.querySelector(`[data-item-id="${id}"]`);
  const plusBtn = document.getElementById('plus-' + id);
  const minusBtn = document.getElementById('minus-' + id);
  const errorMsg = document.getElementById('error-msg-' + id);
  
  // Get the current selected variant stock instead of general product stock
  const variantStock = getCurrentVariantStock(id);
  const stock = variantStock || parseInt(control.dataset.stock); // Fallback to general stock

  let currentQty = parseInt(input.value) || 1;
  let newQty = currentQty + delta;
  let message = '';

  if (newQty < 1) {
    newQty = 1;
  }

  if (newQty > stock) {
    message = `Only ${stock} in stock for this size.`;
    newQty = stock;
  }

  if (newQty > 5) {
    message = `Maximum allowed quantity is 5.`;
    newQty = 5;
  }

  input.value = newQty;
  errorMsg.innerText = message;
  errorMsg.classList.toggle('d-none', !message);

  // Update button states based on variant stock
  plusBtn.disabled = newQty >= Math.min(stock, 5);
  minusBtn.disabled = newQty <= 1;

  updateCartQtyAjax(id, newQty);
}

// Helper function to get current variant stock
function getCurrentVariantStock(itemId) {
  const sizeSelect = document.getElementById(`size-${itemId}`);
  if (!sizeSelect) return null;
  
  const selectedOption = sizeSelect.options[sizeSelect.selectedIndex];
  if (!selectedOption) return null;
  
  // Extract stock number from option text like "M (5 available)" or "L (Out of Stock)"
  const optionText = selectedOption.textContent;
  const stockMatch = optionText.match(/\((\d+) available\)/);
  
  if (stockMatch) {
    return parseInt(stockMatch[1]);
  }
  
  // If it says "Out of Stock", return 0
  if (optionText.includes('Out of Stock')) {
    return 0;
  }
  
  return null; // Fallback to general stock
}

// Updated changeVariant function
function changeVariant(id) {
    console.log('changeVariant called for:', id);
    
    const select = document.getElementById(`size-${id}`);
    const newSize = select.value;

    console.log('Triggered for:', id, 'newSize:', newSize);

    select.disabled = true;

    fetch(`/update-variant/${id}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ newSize })
    })
    .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log(data.message);
        
        // After variant change, update quantity controls based on new variant stock
        updateQuantityControlsForVariant(id);
        
        // Update cart summary if data is provided
        if (data.cartData) {
            updateCartSummary(data.cartData);
        }
        
        showToast('Size updated successfully!', 'success');
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Failed to update size. Please try again.', 'error');
    })
    .finally(() => {
        select.disabled = false;
    });
}

// Function to update quantity controls when variant changes
function updateQuantityControlsForVariant(itemId) {
  const input = document.getElementById('qty-' + itemId);
  const plusBtn = document.getElementById('plus-' + itemId);
  const minusBtn = document.getElementById('minus-' + itemId);
  const errorMsg = document.getElementById('error-msg-' + itemId);

  const variantStock = getCurrentVariantStock(itemId);
  const currentQty = parseInt(input.value) || 1;

  if (variantStock !== null) {
    let message = '';
    let newQty = currentQty;

    // Update button states
    plusBtn.disabled = newQty >= Math.min(variantStock, 5) || variantStock === 0;
    minusBtn.disabled = newQty <= 1;

    // Show/hide error message
    errorMsg.innerText = message;
    errorMsg.classList.toggle('d-none', !message);

    // If variant is out of stock, show appropriate message and disable buttons
    if (variantStock === 0) {
      errorMsg.innerText = 'This size is out of stock.';
      errorMsg.classList.remove('d-none');
      plusBtn.disabled = true;
      minusBtn.disabled = true;
    }

    // Input is always readonly - no need to enable/disable
  }
}

function updateCartQtyAjax(id, qty) {
    fetch(`/update-cart/${id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ qty })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        console.log('Quantity updated!');
        // Update cart summary with new data
        updateCartSummary(data.cartData);
        // Update individual item total price
        updateItemTotalPrice(id, data.itemTotal);
      } else {
        alert(data.message || 'Error updating quantity');
      }
    })
    .catch(err => {
      console.error('AJAX Error:', err);
      alert('Something went wrong');
    });
}

// Function to update cart summary
function updateCartSummary(cartData) {
  if (!cartData) return;
  
  // Update item count
  const itemCountElement = document.querySelector('.price-details-sticky .card-body .d-flex:first-child span:first-child');
  if (itemCountElement) {
    itemCountElement.textContent = `Price (${cartData.itemCount} items)`;
  }
  
  // Update price breakdown
  const priceElement = document.querySelector('.price-details-sticky .card-body .d-flex:first-child span:last-child');
  if (priceElement) {
    priceElement.textContent = `₹${Math.round(cartData.total * 1.2)}`;
  }
  
  // Update discount
  const discountElement = document.querySelector('.price-details-sticky .card-body .d-flex:nth-child(2) span:last-child');
  if (discountElement) {
    discountElement.textContent = `-₹${Math.round(cartData.total * 0.2)}`;
  }
  
  // Update delivery charges
  const deliveryElement = document.querySelector('.price-details-sticky .card-body .d-flex:nth-child(3) span:last-child');
  if (deliveryElement) {
    if (cartData.total <= 2000) {
      deliveryElement.textContent = '₹54';
      deliveryElement.className = '';
    } else {
      deliveryElement.textContent = 'FREE';
      deliveryElement.className = 'text-success';
    }
  }
  
  // Update total amount
  const totalElement = document.querySelector('.price-details-sticky .card-body .d-flex:last-child span:last-child');
  if (totalElement) {
    if (cartData.total <= 2000) {
      totalElement.textContent = `₹${cartData.total + 54}`;
    } else {
      totalElement.textContent = `₹${cartData.total}`;
    }
  }
}

// Function to update individual item total price
function updateItemTotalPrice(itemId, itemTotal) {
  const itemTotalElement = document.querySelector(`[data-item-id="${itemId}"]`).closest('.cart-item-wrapper').querySelector('.item-total-price');
  if (itemTotalElement) {
    itemTotalElement.innerHTML = `Total: ₹${itemTotal}`;
  }
}

// Function to remove cart item via AJAX
function removeCartItem(itemId) {
  if (!confirm('Are you sure you want to remove this item?')) {
    return;
  }

  fetch(`/remove-from-cart/${itemId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      // Remove the item from DOM
      const itemElement = document.querySelector(`[data-item-id="${itemId}"]`).closest('.cart-item-wrapper');
      if (itemElement) {
        itemElement.remove();
      }
      
      // Update cart summary
      if (data.cartData) {
        updateCartSummary(data.cartData);
      }
      
      // Check if cart is empty
      if (data.cartData && data.cartData.itemCount === 0) {
        // Reload page to show empty cart state
        window.location.reload();
      }
      
      showToast('Item removed from cart', 'success');
    } else {
      showToast(data.message || 'Error removing item', 'error');
    }
  })
  .catch(err => {
    console.error('Error removing item:', err);
    showToast('Something went wrong', 'error');
  });
}

// Helper function for toast notifications
function showToast(message, type = 'info') {
    console.log(`${type.toUpperCase()}: ${message}`);
}

// Initialize quantity controls on page load
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all quantity controls based on current variant selection
    const allQuantityControls = document.querySelectorAll('[data-item-id]');
    allQuantityControls.forEach(control => {
        const itemId = control.dataset.itemId;
        updateQuantityControlsForVariant(itemId);
    });

    // Initialize sticky price details behavior
    initializeStickyPriceDetails();
});

// Enhanced sticky behavior for price details
function initializeStickyPriceDetails() {
    const priceDetails = document.querySelector('.price-details-sticky');
    if (!priceDetails) return;

    // Only apply on desktop
    if (window.innerWidth > 768) {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        priceDetails.classList.remove('is-sticky');
                    } else {
                        priceDetails.classList.add('is-sticky');
                    }
                });
            },
            { threshold: 0.1 }
        );

        // Observe the top of the cart items section
        const cartItemsSection = document.querySelector('.cart-card');
        if (cartItemsSection) {
            observer.observe(cartItemsSection);
        }
    }
}
</script>

<%- include('../../views/partials/user/footer') %>